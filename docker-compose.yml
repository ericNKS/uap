services:

  database:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: ${DB_NAME:-app}
      MYSQL_PASSWORD: ${DB_PASSWORD:-!ChangeMe!}
      MYSQL_USER: ${DB_USER:-app}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-!ChangeMe!}
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER:-app}", "-p${DB_PASSWORD:-!ChangeMe!}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/mysql:rw
      - ./db:/docker-entrypoint-initdb.d:ro
    networks:
      - database_network
      
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - database_network

  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-log:/var/log/rabbitmq
    networks:
      - database_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
      
  pride-api:
    build: .
    volumes:
      - ./src:/app/src
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started 
      api-send-mail:
        condition: service_started 
    command: npm run dev
    networks:
      - database_network

  api-send-mail:
    build:
      context: ../MailGo
      dockerfile: Dockerfile.api
    ports:
      - "3030:3000"
    command: /app/api
    networks:
      - database_network
    depends_on:
      - rabbitmq

  service-send-mail:
    build:
      context: ../MailGo
      dockerfile: Dockerfile.queue
    command: /app/queue
    networks:
      - database_network
    depends_on:
      rabbitmq:
        condition: service_healthy
      api-send-mail:
        condition: service_started 



volumes:
  database_data:
  redis-data:
  rabbitmq-data:
  rabbitmq-log:

networks:
  database_network: